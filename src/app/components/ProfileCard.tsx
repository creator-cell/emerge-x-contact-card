"use client";
import Image from "next/image";
import facebook from "../../../public/facebook.png";
import instagram from "../../../public/instagram.png";
import linkedin from "../../../public/linkdin.png";
import logo from "../../../public/logo.svg";
import twitter from "../../../public/twitter.png";
import globe from "../../../public/globe.png";
import whatsapp from "../../../public/whatsapp.png";
import share from '../../../public/share.png'
import Link from "next/link";
import { useMemo } from "react";
import { IoCallOutline } from "react-icons/io5";
import { AiOutlineShareAlt } from "react-icons/ai";
import { MdOutlineMail } from "react-icons/md";
import type { StaticImageData } from 'next/image';


export interface IContactCard {
  _id?: string; // Optional, as it's auto-generated by MongoDB
  photo: string;
  name: string;
  slug: string;
  position: string;
  contactNumber: string;
  email: string;
  location: string;
  websiteLink: string;
  facebookLink: string;
  whatsappNumber: string;
  instagramLink: string;
  linkedinLink: string;
  twitterLink: string;
  createdAt?: string; // From timestamps
  updatedAt?: string; // From timestamps
}

const ProfileCard = ({ data }: { data: IContactCard }) => {

  const socialLinks = useMemo(() => {
    return [
      {
        link: data?.websiteLink,
        icon: globe
      },
      {
        link: data?.facebookLink,
        icon: facebook
      },
      {
        link: `https://wa.me/${data?.whatsappNumber}`,
        icon: whatsapp
      },
      {
        link: data?.instagramLink,
        icon: instagram
      },
      {
        link: data?.linkedinLink,
        icon: linkedin
      },
      
      {
        link: data?.twitterLink,
        icon: twitter
      },
      
    ];
  }, [data]);

  const handleShare = () => {
    if (navigator.share) {
      navigator.share({
        title: document.title,
        text: 'Check out this page!',
        url: window.location.href,
      }).catch((err) => console.error('Error sharing:', err));
    } else {
      navigator.clipboard.writeText(window.location.href)
        .then(() => alert('Link copied to clipboard!'))
        .catch(() => alert('Failed to copy link'));
    }
  };
  console.log(process.env.GOOGLE_API_KEY)
  const handleDownloadContact = (contact: IContactCard) => {
    const vCardData = `
    BEGIN:VCARD
    VERSION:3.0
    N:${contact.name}
    FN:${contact.name}
    TITLE:${contact.position}
    TEL;TYPE=work,voice:${contact.contactNumber}
    EMAIL;TYPE=internet:${contact.email}
    URL:${contact.websiteLink}
    ADR;TYPE=work:${contact.location}
    END:VCARD
      `.trim();
    
      const blob = new Blob([vCardData], { type: 'text/vcard;charset=utf-8' });
      const url = URL.createObjectURL(blob);
    
      const link = document.createElement('a');
      link.href = url;
      link.download = `${contact.name.replace(/\s+/g, '_')}.vcf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    
      URL.revokeObjectURL(url);
  };
  
  return <div className="flex w-full bg-white h-screen max-h-screen overflow-auto justify-center items-center p-4">

    <div className="max-w-4xl relative w-full rounded-xl bg-[#080a08] shadow-2xl p-2 md:p-6 m-auto">
      <Image
        src={logo}
        alt="Logo"
        className="absolute w-28 md:w-44 right-4 top-2 z-20"
      />

      <div className="">
        <div className="flex flex-col md:flex-row justify-between">
          <div className="w-full md:w-[30%]">
            <div className="bg-[url(/stripes.svg)] flex justify-center items-center h-80 md:h-96 w-full bg-center  bg-no-repeat bg-contain">
              <Image
                src={data?.photo}
                alt={data?.name}
                width={100} height={100}
                className="w-40 md:w-60"
              />
            </div>

          </div>

          <div className="w-full md:w-[70%] p-4 md:p-10 relative space-y-6">

            <Image src="/contact.png" width={100} height={100} alt="" className="absolute w-10 md:w-16 z-28 right-1 md:right-2 top-16 md:top-[75%] -translate-y-1/2" onClick={() => handleDownloadContact(data)}/>

            <div className="absolute inset-0 h-full z-0 pointer-events-none 
              bg-[linear-gradient(to_right,rgba(255,255,255,0.05)_1px,transparent_1px),linear-gradient(to_bottom,rgba(255,255,255,0.05)_1px,transparent_1px)] 
              bg-[size:80px_80px] 
              bg-[position:40px_0]" />

            <div className="absolute -top-20 left-1/2 -translate-x-1/2 w-[600px] h-[600px] rounded-full blur-3xl opacity-70 pointer-events-none bg-[radial-gradient(ellipse_at_top,_#132a0e,_#010101)] z-0" />
            <div className="space-y-2 text-center md:text-left relative z-20">
              <h1 className="text-2xl lg:text-3xl font-[900] text-white">{data?.name}</h1>
              <p className="text-md font-[400] text-white">{data?.position}</p>
            </div>

            <div className="flex flex-nowrap relative gap-4 justify-center md:justify-evenly z-20 text-md">
              <div className="w-1/2 space-y-3">
                <p className="text-nowrap text-sm md:text-md text-white">+971 {data?.contactNumber}</p>

                <div className="flex items-center  gap-4">

                  <Link href={`tel:${data?.contactNumber}`}>
                    <button className="text-sm flex items-center cursor-pointer justify-center gap-2 px-4 py-1 border rounded-full">
                      <IoCallOutline className="text-sm md:text-lg" />
                      Call
                    </button>
                  </Link>

                  <div className="border rounded-full p-1">
                    <AiOutlineShareAlt className="text-lg" />
                  </div>

                </div>
              </div>
              <div className="w-1/2 space-y-3">
                <p className="text-nowrap text-sm md:text-md text-white"> {data?.email}</p>

                <div className="flex items-center gap-4">

                  <Link href={`mailto:${data?.email}`}>
                    <button className="text-sm flex items-center cursor-pointer justify-center gap-2 px-4 py-1 border rounded-full">
                      <MdOutlineMail className="text-sm md:text-lg" />
                      Email
                    </button>
                  </Link>

                  <div className="border rounded-full p-1">
                    <AiOutlineShareAlt className="text-lg" />
                  </div>

                </div>
              </div>

            </div>
            <div className="space-y-3 z-20 relative ">
              <p className="text-md text-center md:text-left text-white">Office Location</p>
              
              <iframe
              src={`https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2727.368442998152!2d55.30018750000001!3d25.1555625!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3e5f69270f5612c3%3A0x2d7e43041843e7d8!2sMeydan%20Free%20Zone!5e1!3m2!1sen!2sin!4v1746466938990!5m2!1sen!2sin`}
              className="w-full h-[150px] md:h-[200px] md:w-[90%] rounded-2xl aspect-video"
              loading="lazy"
              allowFullScreen
            ></iframe>
            </div>

          </div>
        </div>

        <div className="flex items-center justify-between w-full my-2 z-20 text-white">
          {socialLinks?.map(
            ({ link, icon }: { link: string; icon: StaticImageData }, i) => (
              <Link key={i} href={link} target="_blank" rel="noopener noreferrer">
                <Image
                  src={icon}
                  alt="social"
                  width={100}
                  height={100}
                  className="w-[35px] h-[35px] object-contain hover:scale-110 transition-transform text-white"
                />
              </Link>
            )
          )}
          <Image
            src={share}
            alt="share"
            width={100}
            height={100}
            className="w-[35px] h-[35px] object-contain hover:scale-110 transition-transform cursor-pointer text-white"
            onClick={handleShare}
          />
        </div>
       
      </div>
    </div>

  </div>


}





export default ProfileCard;
